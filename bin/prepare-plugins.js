#!/usr/bin/env node

const fs = require('fs');
var exec = require("./exec-process.js");

const getPlugins = (callback) => {
  fs.readFile("plugins.json", 'utf8', function (err, data) {
    if (err) {
      throw err;
    }
    callback(JSON.parse(data));
  });
};

const capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);
const pluginClass = (plugin) => `${capitalize(plugin.name)}Plugin`;
const pluginStateClass = (plugin) => `${capitalize(plugin.name)}PluginState`;
const pluginPath = (plugin) => `./${plugin.git ? plugin.git.split('/').pop() : plugin.name}`;
const pluginsImport = (plugin) => `\nimport { ${pluginClass(plugin)}, ${pluginStateClass(plugin)} } from '${pluginPath(plugin)}';`;
const styleImports = (plugin) => `\n@import '${pluginPath(plugin)}/styles/style.pcss';`;

const getPluginsImports = plugins => {
  let imports = [];
  for (const i of plugins) {
    imports = [...imports, pluginsImport(i)]
  }

  return imports.join('');
}

const generatePluginsTemplate = plugins => {
  const pluginsTemplate = `/**
 * DO NOT EDIT THIS FILE
 *
 * To add or remove a plugin:
 * - Edit plugins.json
 * - Run yarn prepare:plugins
 */
${getPluginsImports(plugins)}

${!plugins.length ? "// tslint:disable-next-line: no-empty-interface" : ""}
export interface PluginsState {
${plugins.map(p => "    " + p.name + ": " + pluginStateClass(p) + ";").join("\n")}
}

export const pluginsInstances = {
${plugins.map(p => "    " + p.name + ": " + pluginClass(p)).join(",\n")}${plugins.length > 1 ? "," : ""}
};
`;

  fs.writeFileSync("./src/plugins/PluginsTemplate.ts", pluginsTemplate)
}

const generatePluginsStyles = plugins => {
  let imports = [];
  for (const i of plugins) {
    imports = [...imports, styleImports(i)]
  }

  const template = imports.length ? imports.join('') : `/* stylelint-disable-no-empty-source */\n`;

  fs.writeFileSync("./src/plugins/style.pcss", template);
}

getPlugins(plugins => {
  generatePluginsTemplate(plugins);
  generatePluginsStyles(plugins);
});

const wait = time => new Promise((resolve) => setTimeout(resolve, time));
wait(2000).then(() => console.log(`
<<<<<< PluginsTemplate.ts >>>>>>
${fs.readFileSync("./src/plugins/PluginsTemplate.ts", "utf8")}

<<<<<< style.pcss >>>>>>
${fs.readFileSync("./src/plugins/style.pcss", "utf8")}`
));
