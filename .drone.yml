---
kind: pipeline
name: "Stage"

concurrency:
  limit: 2

steps:
  - name: "Test"
    image: node:10.11
    environment:
      REACT_APP_BUILD_VERSION: Enterprise
      NPM_AUTH_TOKEN:
        from_secret: drone_npm_auth_token
    commands:
      - echo "//registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN" > .npmrc
      - export REACT_APP_GIT_SHA=$(git rev-parse --short HEAD)
      - echo $REACT_APP_GIT_SHA > .tags
      - export BUILD_DOMAIN=$(cat .domains)
      - export BUILD_EXPIRE=$(date -d "+1 month" +%s000)
      - npm -g install yarn
      - yarn install
      - yarn lint
      - yarn test:ci --collectCoverage=true

  - name: "Build"
    image: node:10.11
    environment:
      NPM_AUTH_TOKEN:
        from_secret: drone_npm_auth_token
    commands:
      - echo "//registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN" > .npmrc
      - npm -g install yarn
      - yarn build

  - name: "Build container"
    image: plugins/docker
    environment:
      NPM_AUTH_TOKEN:
        from_secret: drone_npm_auth_token
      REACT_APP_BUILD_VERSION: Enterprise
    settings:
      registry: reg.openware.work
      repo: reg.openware.work/emirex/baseapp
      build_args_from_env:
        - REACT_APP_BUILD_VERSION
        - NPM_AUTH_TOKEN
      username:
        from_secret: ow_registry_username
      password:
        from_secret: ow_registry_password

  - name: "Redeploy on stage"
    image: rubykube/microkube:0.2.0
    environment:
      WEBHOOK_JWT_SECRET:
        from_secret: emirex_webhook_secret
    commands:
      - export latest_image=reg.openware.work/emirex/baseapp:$(cat .tags)
      - cd /home/app
      - bundle exec rake payload:send[frontend,$latest_image,http://www.devkube.com:1337]

  - name: "Run integration testing"
    image: cypress/browsers:chrome69
    commands:
      - npm install --save-dev cypress
      - export CYPRESS_baseUrl=http://www.devkube.com
      - $(npm bin)/cypress run --browser chrome

  - name: "Notify about redeployment on devkube"
    image: plugins/slack
    settings:
      webhook:
        from_secret: cryptobase_slack_webhook
      channel:
        from_secret: cryptobase_slack_channel
      template: >
        {{#success build.status}}
          [SUCCESS] (Base Application) Master branch build by {{ build.author }} has succeeded!
          Version is {{ build.tag }}
          Visit http://www.devkube.com to check it out!
        {{else}}
          [FAILURE] Master branch build by {{ build.author }} has failed!
        {{/success}}
        Check the build info here: {{ build.link }}
    when:
      status: [success, failure]

trigger:
  branch:
  - master
  event:
  - push

---
kind: pipeline
name: "Redeploy preprod"

concurrency:
  limit: 2

steps:

  - name: "Build Emirex Preprod image"
    image: plugins/gcr
    environment:
      NPM_AUTH_TOKEN:
        from_secret: drone_npm_auth_token
      BUILD_EXPIRE: $(date -d "+1 year" +%s000)
      BUILD_DOMAIN: .emirex.com
      REACT_APP_BUILD_VERSION: Enterprise
    settings:
      repo: gcr.io/emirex-preprod/baseapp
      tags: ${DRONE_COMMIT_SHA:0:7}
      build_args_from_env:
        - NPM_AUTH_TOKEN
        - BUILD_DOMAIN
        - BUILD_EXPIRE
        - REACT_APP_BUILD_VERSION
      json_key:
        from_secret: emirex_gcp_creds_base64

  - name: "Redeploy on Preprod"
    image: komljen/drone-kubectl-helm
    environment:
      KUBERNETES_SERVER:
        from_secret: emirex_preprod_k8s_server_url
      KUBERNETES_CERT:
        from_secret: emirex_preprod_k8s_server_cert
      KUBERNETES_TOKEN:
        from_secret: emirex_preprod_k8s_sa_token
      KUBECTL_COMMAND:
        from_secret: emirex_preprod_k8s_redeploy_cmd
    commands:
      - /run.sh
      - kubectl set image deployment/frontend -n preprod-app frontend=gcr.io/emirex-preprod/baseapp:${DRONE_COMMIT_SHA:0:7}

trigger:
  branch:
  - customer/emirex
  event:
  - push