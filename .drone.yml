---
kind: pipeline
name: "Stage"

concurrency:
  limit: 2

steps:
  - name: "Test"
    image: node:10.11
    environment:
      REACT_APP_BUILD_VERSION: Enterprise
    commands:
      - export REACT_APP_GIT_SHA=$(git rev-parse --short HEAD)
      - echo $REACT_APP_GIT_SHA > .tags
      - export BUILD_DOMAIN=$(cat .domains)
      - export BUILD_EXPIRE=$(date -d "+1 month" +%s000)
      - cd src/containers/ && unlink index.ts && ln -s index$REACT_APP_BUILD_VERSION.ts index.ts
      - npm -g install yarn
      - yarn install
      - yarn lint
      - yarn test:ci --collectCoverage=true
      - yarn build

  - name: "Build Docker image"
    image: plugins/docker
    environment:
      REACT_APP_BUILD_VERSION: Enterprise
    settings:
      build_args_from_env:
        - REACT_APP_BUILD_VERSION
      username:
        from_secret: quay_username
      password:
        from_secret: quay_password
      repo:
        from_secret: quay_repo
      registry: quay.io
    when:
      branch:
        - rc/**

  - name: "Stage with mock server"
    image: alpine/git
    environment:
      PRIVATE_KEY:
        from_secret: deploy_key
    commands:
      - echo "$PRIVATE_KEY" | base64 -d > id_rsa
      - chmod 0600 id_rsa
      - cd build/config/
      - echo "window.env={api:{authUrl:'http://api-v2.mock.openware.work/api/v2/barong',tradeUrl:'http://api-v2.mock.openware.work/api/v2/peatio',applogicUrl:'http://api-v2.mock.openware.work/api/v2/applogic',rangerUrl:'ws://ranger.mock.openware.work/api/v2/ranger'},captcha:{captchaType:'none',siteKey:''}};" > env.js
      - cat env.js
      - cd /drone/src/
      - scp -r -i id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null build mock@mock.openware.work:/home/mock/builds/${DRONE_COMMIT_SHA:0:7}
      - scp -r -i id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null coverage/lcov-report mock@mock.openware.work:/home/mock/builds/${DRONE_COMMIT_SHA:0:7}-coverage
      - echo "http://${DRONE_COMMIT_SHA:0:7}.mock.openware.work"
      - echo "http://${DRONE_COMMIT_SHA:0:7}-coverage.mock.openware.work"

  - name: "Notify staging"
    image: plugins/slack
    settings:
      webhook:
        from_secret: baseapp_slack_webhook
      channel:
        from_secret: baseapp_slack_channel
      template: >
        {{#success build.status}}
          [SUCCESS] (Base Application) Branch {{ build.branch }} by {{ build.author }} staging has succeeded!

          Visit http://{{ truncate build.commit 7 }}.mock.openware.work to check it out!
          Coverage report: http://{{ truncate build.commit 7 }}-coverage.mock.openware.work
        {{else}}
          [FAILURE] Branch {{ build.branch }} by {{ build.author }} staging has failed!
        {{/success}}
        Check the build info here: {{ build.link }}
    when:
      status: [success, failure]

trigger:
  event:
    - push
  branch:
    exclude:
    - master
    - 2-3-stable

---
kind: pipeline
name: "New version"

concurrency:
  limit: 2

steps:
  - name: "Test"
    image: node:10.11
    commands:
      - npm -g install yarn
      - yarn install
      - yarn lint
      - yarn test:ci --collectCoverage=true

  - name: "Bump & Tag"
    image: quay.io/openware/sdk-tools:0.0.3
    environment:
      BRANCH_NAME: ${DRONE_BRANCH}
      REPO_NAME: ${DRONE_REPO}
      GITHUB_API_KEY:
        from_secret: kite_bot_key
    commands:
      - BUNDLE_GEMFILE=/sdk/Gemfile bundle exec rake --rakefile=/sdk/Rakefile release:push

  - name: "Build Docker image"
    image: plugins/docker
    environment:
      REACT_APP_BUILD_VERSION: Enterprise
    settings:
      registry: reg.openware.work
      repo: reg.openware.work/emirex/baseapp
      build_args_from_env:
        - REACT_APP_BUILD_VERSION
      username:
        from_secret: ow_registry_username
      password:
        from_secret: quay_password
      repo:
        from_secret: quay_repo
      registry: quay.io

  - name: "Redeploy on stage"
    image: rubykube/microkube:0.2.0
    environment:
      WEBHOOK_JWT_SECRET:
        from_secret: emirex_webhook_secret
    commands:
      - export latest_image=reg.openware.work/emirex/baseapp:$(cat .tags)
      - cd /home/app
      - bundle exec rake payload:send[frontend,$latest_image,http://www.devkube.com:1337]

  - name: "Notify about redeployment on devkube"
    image: plugins/slack
    settings:
      webhook:
        from_secret: cryptobase_slack_webhook
      channel:
        from_secret: cryptobase_slack_channel
      template: >
        {{#success build.status}}
          [SUCCESS] (Base Application) 2-3-stable branch build by {{ build.author }} has succeeded!
          Version is {{ build.tag }}
          Visit http://www.devkube.com to check it out!
        {{else}}
          [FAILURE] 2-3-stable branch build by {{ build.author }} has failed!
        {{/success}}
        Check the build info here: {{ build.link }}
    when:
      status: [success, failure]

trigger:
  branch:
  - 2-3-stable
  event:
  - push

image_pull_secrets:
  - dockerconfigjson
