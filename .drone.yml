---
kind: pipeline
name: "Stage"

concurrency:
  limit: 2

steps:
  - name: "Test & Build"
    image: node:12.13.1
    commands:
      - export REACT_APP_GIT_SHA=$(git rev-parse --short HEAD)
      - echo $REACT_APP_GIT_SHA > .tags
      - export BUILD_DOMAIN=$(cat .domains)
      - export BUILD_EXPIRE=$(date -d "+1 month" +%s000)
      - npm -g install yarn
      - yarn install
      - yarn lint
      - yarn test:ci --collectCoverage=true
      - yarn build

  - name: "Build enterprise customer image and push to reg.openware.work"
      image: plugins/docker
      environment:
        BUILD_DOMAIN: ".openware.work"
        REACT_APP_BUILD_VERSION: Enterprise
      settings:
        username:
          from_secret: ow_registry_username
        password:
          from_secret: ow_registry_password
        repo: reg.openware.work/emirex/baseapp
        tags: ${DRONE_COMMIT:0:7}
        build_args_from_env:
          - REACT_APP_BUILD_VERSION
          - BUILD_DOMAIN
        registry: reg.openware.work
      when:
        branch:
            - customer/emirex-2.5
        event:
            - push

  - name: "Notify staging"
    image: plugins/slack
    settings:
      webhook:
        from_secret: baseapp_slack_webhook
      channel:
        from_secret: baseapp_slack_channel
      template: >
        {{#success build.status}}
          [SUCCESS] (Base Application) Branch {{ build.branch }} by {{ build.author }} staging has succeeded!

          Visit http://{{ truncate build.commit 7 }}.mock.openware.work to check it out!
          Coverage report: http://{{ truncate build.commit 7 }}-coverage.mock.openware.work
        {{else}}
          [FAILURE] Branch {{ build.branch }} by {{ build.author }} staging has failed!
        {{/success}}
        Check the build info here: {{ build.link }}
    when:
      status: [success, failure]

trigger:
  event:
    - push
  branch:
    exclude:
    - master
    - "2-*-stable"

---
kind: pipeline
name: "New version"

concurrency:
  limit: 2

steps:
  - name: "Test"
    image: node:12.13.1
    commands:
      - npm -g install yarn
      - yarn install
      - yarn lint
      - yarn test:ci --collectCoverage=true

  - name: "Bump & Tag"
    image: quay.io/openware/sdk-citools:2.4.5
    environment:
      BRANCH_NAME: ${DRONE_BRANCH}
      REPO_NAME: ${DRONE_REPO}
      GITHUB_API_KEY:
        from_secret: kite_bot_key
    commands:
      - BUNDLE_GEMFILE=/sdk/Gemfile bundle exec rake --rakefile=/sdk/Rakefile ci:prebuild

  - name: "Build image"
    image: plugins/gcr
    environment:
      BUILD_EXPIRE: "3 month"
    settings:
      repo: gcr.io/openware-production/baseapp
      build_args_from_env:
        - BUILD_EXPIRE
      json_key:
        from_secret: openware_gcp_creds_base64

  - name: "Redeploy on master.devkube.com"
    image: rubykube/microkube:0.2.0
    environment:
      WEBHOOK_JWT_SECRET:
        from_secret: emirex_webhook_secret
    commands:
      - export latest_image=reg.openware.work/emirex/baseapp:$(cat .tags)
      - cd /home/app
      - bundle exec rake payload:send[frontend,$latest_image,http://$DRONE_BRANCH.devkube.com:1337]
    when:
      branch:
        - master

  - name: "Push and Notify"
    image: quay.io/openware/sdk-citools:2.4.5
    environment:
      BOT_USERNAME: kite-bot
      BOT_NAME: Kite Bot
      BOT_EMAIL: kite-bot@heliostech.fr
      BRANCH_NAME: ${DRONE_BRANCH}
      SDK_BRANCH: ${DRONE_BRANCH}
      REPO_NAME: ${DRONE_REPO}
      TELEGRAM_BOT_TOKEN:
        from_secret: baseapp_telegram_bot_token
      TELEGRAM_CHAT_ID:
        from_secret: baseapp_telegram_chat_id
      SLACK_TOKEN:
        from_secret: baseapp_slack_token
      SLACK_CHANNEL:
        from_secret: baseapp_slack_channel
      GITHUB_API_KEY:
        from_secret: kite_bot_key
    commands:
      - BUNDLE_GEMFILE=/sdk/Gemfile bundle exec rake --rakefile=/sdk/Rakefile ci:postbuild[/drone/src]
    when:
      branch:
        - master
        - "2-*-stable"

trigger:
  branch:
  - master
  - "2-*-stable"
  event:
  - push

image_pull_secrets:
  - dockerconfigjson
